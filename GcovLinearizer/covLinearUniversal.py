##############################
#
# File: covLinearUniversal.py
# Description:
#   1. linearlize and compare the coverage for the same package.
#      Generated by different upper-level components.
#   2. This is the version that works on all info file sets.
#   
##############################

import sys
import os


##############################
#
# Coverage data read
#
##############################


# Step 1: get the .info file list.

if len(sys.argv) != 3:
    print >> sys.stderr, "Error: Format: python covLinear.py DIR/TO/.INFO/FILES OUTPUT/FILE"
    sys.exit(1)

fileDir = os.path.abspath(sys.argv[1])

infoList = []

for item in os.listdir(fileDir):
    if ".info" in item and not "~" in item and not "#" in item:
        item = fileDir + '/' + item
        infoList.append(item)

infoList.sort()

contentList = {} # opened info files
for item in infoList:

    contentList[item] = open(item, 'r')

# print contentList

# Step 2: scan .info files, store coverage data
# Coverage data:
#  lineCovData = { fileName, {sourceFile, {line#, hit_times}} }
#  funCovData = { fileName, {sourceFile, {func_name, hit_times}} }
#  brCovData = { fileName, {sourceFile, {(line#, block#, br#), hit_times}} }
#  
# Summary data:
# key: 'found', 'hit'; val: int
#  lineSum = {fileName, {sourceFile, {key, val}}}
#  funSum = {fileName, {sourceFile, {key, val}}}
#  brSum = {fileName, {sourceFile, {key, val}}}


lineCovData = {}
funCovData = {}
brCovData = {}

lineSum = {}
funSum = {}
brSum = {}

# prefix list with default values.
prefixList = ['/usr/home/tlong/apr/', '/home/tlong/new_workspace/apr/', '/home/tlong/openmpi/', '/usr/home/tlong/openmpi/', '/home/tlong/workspace/apache-httpd/','/home/tlong/workspace/openmp/']

# testList, indicating the path of test sources.
testList = ['apr-1.4.2/test/']


for item in contentList:

    if item not in lineCovData:
        lineCovData[item] = {}
        funCovData[item] = {}
        brCovData[item] = {}

        lineSum[item] = {}
        funSum[item] = {}
        brSum[item] = {}
    content = contentList[item].readlines()


    # status flags for each file
    sourceFile = '' # the abspath to the source file
    isCFile = False # indicating whether it is a .c file


    # for each file
    for line in content:

        line = line.strip()

        if line.startswith('SF:'):
            sourceFile = line[3:]

            if sourceFile.endswith('.c'):
                # check prefix, then only use relative path as key.
                foundPrefix = False
                for prefix in prefixList:
                    if sourceFile.startswith(prefix):
                        sourceFile = sourceFile[len(prefix):]
                        # print sourceFile
                        foundPrefix = True
                        break

                if foundPrefix == False:
                    print "source:",sourceFile
                    prefix=raw_input("Please input the prefix to the pkg directory:")
                    if not sourceFile.startswith(prefix):
                        print "Error, wrong prefix inputed!"
                        sys.exit(1)
                    prefixList.append(prefix)
                    sourceFile = sourceFile[len(prefix):]
                    # print sourceFile
                

                # omit test files:
                isTest = False
                for pref in testList:
                    if sourceFile.startswith(pref):
                        isTest = True
                        break
                if isTest == True:
                    isCFile = False
                    continue
                
                isCFile = True
                if sourceFile not in lineCovData[item]:
                    lineCovData[item][sourceFile] = {}
                    funCovData[item][sourceFile] = {}
                    brCovData[item][sourceFile] = {}

                    lineSum[item][sourceFile] = {}
                    funSum[item][sourceFile] = {}
                    brSum[item][sourceFile] = {}
                else:
                    # print >> sys.stderr, "Error: duplicated source file:"
                    # print >> sys.stderr, "Filename: ", item
                    # print >> sys.stderr, "Source file name: ", sourceFile
                    # sys.exit(1)
                    continue
            elif sourceFile.endswith('.h'):
                isCFile = False
                continue
            elif sourceFile.endswith('.l'): # lex
                isCFile = False
                continue
            else:
                print >> sys.stderr, "Error: wired filename..."                
                print >> sys.stderr,  sourceFile
                isCFile = False
                continue
                # sys.exit(1)

        # if the current line is not about a '.c' file, then skip it
        elif isCFile == False:
            continue

        elif line.startswith('FN:'):
            funName = line.split(',')[1]
            # print funName
            # print line
            if funName not in funCovData[item][sourceFile]:
                funCovData[item][sourceFile][funName] = None
            else:
                # print >> sys.stderr, "the function already there."
                # print >> sys.stderr, sourceFile, ":", funName
                None
            continue
        
        elif line.startswith('FNDA:'):
            funName = line.split(',')[1]
            hitTimes = line.split(',')[0].split(':')[1]
            # print "item:", item, "sourceFile:", sourceFile
            # print "funName:", funName

            # gcov bug, sometimes the function name will not be
            # detected, but this hitting record will be recorded.
            if funName not in funCovData[item][sourceFile]: 
                funCovData[item][sourceFile][funName] = None
                print >> sys.stderr, "bug of gcov happened, function hit before detected."
            if funCovData[item][sourceFile][funName] == None:
                funCovData[item][sourceFile][funName] = int(hitTimes)
            else:
                funCovData[item][sourceFile][funName] += int(hitTimes)
                # print >> sys.stderr, "Error: muliple function hit record."
                # print >> sys.stderr, "file: ", item
                # print >> sys.stderr, "source file: ", sourceFile
                # print >> sys.stderr, "function name: ", funName

                # sys.exit(1)
            continue

        elif line.startswith('FNF:'):
            if 'found' not in funSum[item][sourceFile]:
                funSum[item][sourceFile]['found'] = int(line[4:])
            else:
                funSum[item][sourceFile]['found'] += int(line[4:])
            continue

        elif line.startswith('FNH:'):
            # print int(line[4:])
            if 'hit' not in funSum[item][sourceFile]:
                funSum[item][sourceFile]['hit'] = int(line[4:])
            else:
                funSum[item][sourceFile]['hit'] += int(line[4:])

        elif line.startswith('BRDA:'):
            data = line[5:].split(',')
            key = (data[0], data[1], data[2])
            if data[3] == '-':
                val = 0
            # elif data[3] == '0':
            #     print "WTF!"
            else:
                val = int(data[3])
            if key not in brCovData[item][sourceFile]:
                brCovData[item][sourceFile][key] = val
            else:
                brCovData[item][sourceFile][key] += val
            continue

        elif line.startswith('BRF:'):
            if 'found' not in brSum[item][sourceFile]:
                brSum[item][sourceFile]['found'] = int(line[4:])
            else:
                brSum[item][sourceFile]['found'] += int(line[4:])
            continue

        elif line.startswith('BRH:'):
            if 'hit' not in brSum[item][sourceFile]:
                brSum[item][sourceFile]['hit'] = int(line[4:])
            else:
                brSum[item][sourceFile]['hit'] += int(line[4:])
            # print int(line[4:])
            continue
            
        elif line.startswith('DA:'):
            data = line[3:]
            line_num = data.split(',')[0]
            hit_num = int(data.split(',')[1])

            if line_num not in lineCovData[item][sourceFile]:
                lineCovData[item][sourceFile][line_num] = hit_num
            else:
                lineCovData[item][sourceFile][line_num] += hit_num
            continue

        elif line.startswith('LF:'):
            if 'found' not in lineSum[item][sourceFile]:
                lineSum[item][sourceFile]['found'] = int(line[3:])
            else:
                lineSum[item][sourceFile]['found'] += int(line[3:])
            continue

        elif line.startswith('LH:'):

            if 'hit' not in lineSum[item][sourceFile]:
                lineSum[item][sourceFile]['hit'] = int(line[3:])
            else:
                lineSum[item][sourceFile]['hit'] += int(line[3:])
            # print item, sourceFile
            # print int(line[3:])
            # print lineSum[item][sourceFile]
            continue
        elif line.startswith('TN:') or \
                 line.startswith('end_of_record'): # known else
            continue

        else:
            print >> sys.stderr, "Unknown line in the info file:"
            print >> sys.stderr, line
            sys.exit(1)


# debugging purpose
stat1 = {} # {infofile_name, #}, from lineSum
stat2 = {} # {infofile_name, #}, from lineCovData
for item in lineSum:
    stat1[item] = 0
    for sItem in lineSum[item]:
        stat1[item] += lineSum[item][sItem]['found']

print "from lineSum:"
for item in stat1:
    print item, ":", stat1[item]

for i in lineCovData:
    stat2[i] = 0
    for j in lineCovData[i]:
        stat2[i] += len(lineCovData[i][j])

print "from lineCovData:"
for item in stat2:
    print item, ':', stat2[item]

##############################
#
# Coverage Statistics
#
##############################


# lineStat_single = {(sourcefile, line#), isHit}
# funStat_single = {(sourcefile, func_name, isHit)}
# brStat_single = {(sourcefile, line#, block#, br#), isHit}

# lineStat = {(sourcefile, line#), hitTimes}
# funStat = {(sourcefile, func_name, hitTimes)}
# brStat = {(sourcefile, line#, block#, br#), hitTimes}

# CAUTION: we DO NOT count apr's own unit test in coverage statistics


lineStat_single = {}
funStat_single = {}
brStat_single = {}

lineStat = {}
funStat = {}
brStat = {}

print "\n>>> list of 'info' files:"
for item in lineCovData.keys():
    print item
print


# for debugging purpose only: count # of source files.
print "\n>>> number of sourcefiles:"
print "\tfrom lineCovData:"
infos = {}
for i in infoList:
    infos[i] = []
    for j in lineCovData[i]:
        infos[i].append(j)
    print i
    print len(infos[i])

print "\tfrom funCovData:"
infos = {}
for i in infoList:
    infos[i] = []
    for j in funCovData[i]:
        infos[i].append(j)
    print i
    print len(infos[i])
    
# for debugging purpose only: count # of lines or branches
print "\n>>> number of lines:"
for i in infoList:
    lineNum = 0
    for j in lineCovData[i]:
        lineNum += len(lineCovData[i][j])
    print i
    print "line#:", lineNum

print "\n>>> number of functions:"
for i in infoList:
    funNum = 0
    for j in funCovData[i]:
        funNum += len(funCovData[i][j])
    print i
    print "fun#:", funNum


print "\n>>> number of branches:"
for i in infoList:
    brNum = 0
    for j in brCovData[i]:
        brNum += len(brCovData[i][j])
    print i
    print "br#:", brNum
    



# use the sourcefile list in example info file for calculation?
example_info_file = infoList[0]
sourceList = lineCovData[example_info_file]




for item in sourceList:
    for sItem in sourceList[item]:
        key = (item, sItem)

        val = 0
        counter = 0
        for infoFile in infoList:
            if 'self' not in infoFile:
                # print "infoFile", infoFile
                # print "infoFile:", infoFile
                # print "item:", item

                # the file is not covered at all
                if (item not in lineCovData[infoFile]) or \
                       sItem not in lineCovData[infoFile][item]:
                    continue
                val += lineCovData[infoFile][item][sItem]
                if lineCovData[infoFile][item][sItem] != 0:
                    counter += 1

        # print (key, val)
        lineStat[key] = val
        lineStat_single[key] = counter

sourceList = funCovData[example_info_file]

for item in sourceList:
    for sItem in sourceList[item]:
        key = (item, sItem)
        val = 0
        counter = 0

        for infoFile in infoList:
            if 'self' not in infoFile:
                if item not in funCovData[infoFile] or \
                       sItem not in funCovData[infoFile][item]:
                    continue
                
                val += funCovData[infoFile][item][sItem]
                if funCovData[infoFile][item][sItem] != 0:
                    counter += 1
        
        funStat[key] = val
        funStat_single[key] = counter
        # if val == 0:
        #     funStat_single[key] = 0
        # else:
        #     funStat_single[key] = 1


sourceList = brCovData[example_info_file]

for item in sourceList:
    for sItem in sourceList[item]:
        key = (item, sItem)
        val = 0
        counter = 0

        for infoFile in infoList:
            if 'self' not in infoFile:
                # print "infoFile", infoFile
                if item not in brCovData[infoFile] or \
                       sItem not in brCovData[infoFile][item]:
                    continue
                val += brCovData[infoFile][item][sItem]
                if brCovData[infoFile][item][sItem] != 0:
                    counter += 1
                
        brStat[key] = val
        brStat_single[key] = counter


# for debug purpose
exit()



########################################
#
# Data analysis part
#
########################################

# Questions to answer:
# 0. What is the statistics of the apr package?
# 1. What is the coverage of the unit test of apr?
# 2. What is the coverage brought to apr by each individual upper-level package?
# 3. What is the extra coverage brought to apr by each individual upper-leve package?
# 4. What is the overall coverage brought to apr by the 4 upper-level packages?
# 5. What is the extra coverage brought to apr by all upper-level packages together?
# 6. What is the overlap of coverage from the 4 upper-level packages?
# 7. What is the overlap of the 4 upper-level packages' extra coverage?



print r'''
##############################
#
# 0. What is the statistics of the apr package?
#
##############################
'''

totalLine = len(lineStat)
totalFun = len(funStat)
totalBr = len(brStat)

print "Number of lines: ", totalLine
print "Number of functions: ", totalFun
print "Number of branches: ", totalBr



print r'''
##############################
#
# 1. What is the coverage of the unit test of apr?
#
##############################
'''


# unitName = '/home/tlong/Dropbox/func_test/openmpi_result/infofiles/z_self.info'
# unitName = fileDir + '/z_self.info'
unitName = infoList[-1]

subLineCov = lineCovData[unitName]
counter = 0
for item in subLineCov:
    for sItem in subLineCov[item]:
        if (item, sItem) in lineStat and \
               subLineCov[item][sItem] != 0:
            counter += 1


print "line_cov:", str(float(counter) / float(totalLine) * 100) + '%'

subFunCov = funCovData[unitName]
counter = 0
for item in subLineCov:
    for sItem in subFunCov[item]:
        if (item, sItem) in funStat and \
               subFunCov[item][sItem] != 0:
            counter += 1


print "fun_cov:", str(float(counter) / float(totalFun) * 100) + '%'

subBrCov = brCovData[unitName]
counter = 0
for item in subBrCov:
    for sItem in subBrCov[item]:
        if (item, sItem) in brStat and \
               subBrCov[item][sItem] != 0:
            counter += 1

print "br_cov:",  str(float(counter) / float(totalBr) * 100) + '%'


print r'''
##############################
#
# 2. What is the coverage brought to apr by each individual upper-level package?
#
##############################
'''



print "line_cov:"
sum = 0.0
for item in infoList:
    if 'self' not in item:
        # print item
        counter = 0
        for sItem in lineCovData[item]:
            # print sItem
            for ssItem in lineCovData[item][sItem]:
                # print ssItem
                # print lineCovData[item][sItem][ssItem]
                if lineCovData[item][sItem][ssItem] != 0:
                    counter += 1
        fileName = item.split('/')[-1].split('.')[0]
        print fileName, ':', str(float(counter) / float(totalLine) * 100) + '%'
        sum += float(counter) / float(totalLine)
print "\tSum: ", str(sum * 100) + '%'

print "\nfun_cov:"
sum = 0.0
for item in infoList:
    if 'self' not in item:
        # print item
        counter = 0
        for sItem in funCovData[item]:
            # print sItem
            for ssItem in funCovData[item][sItem]:
                # print ssItem
                # print lineCovData[item][sItem][ssItem]
                if funCovData[item][sItem][ssItem] != 0:
                    counter += 1
        fileName = item.split('/')[-1].split('.')[0]
        print fileName, ':', str(float(counter) / float(totalFun) * 100) + '%'
        sum += float(counter) / float(totalFun)
print "\tSum: ", str(sum * 100) + '%'        

print "\nbr_cov:"
sum = 0.0
for item in infoList:
    if 'self' not in item:
        # print item
        counter = 0
        for sItem in brCovData[item]:
            # print sItem
            for ssItem in brCovData[item][sItem]:
                # print ssItem
                # print lineCovData[item][sItem][ssItem]
                if brCovData[item][sItem][ssItem] != 0:
                    counter += 1
        fileName = item.split('/')[-1].split('.')[0]
        print fileName, ':', str(float(counter) / float(totalBr) * 100) + '%'
        sum += float(counter) / float(totalBr)
print "\tSum: ", str(sum * 100) + '%'        

print r'''
##############################
#
# 3. What is the extra coverage brought to apr by each individual upper-leve package?
#
##############################
'''

print "line_cov:"
sum = 0.0
for item in infoList:
    if 'self' not in item:
        counter = 0
        for sItem in lineCovData[item]:
            for ssItem in lineCovData[item][sItem]:
                # print "sItem:", sItem
                if lineCovData[item][sItem][ssItem] != 0 and \
                       (sItem not in lineCovData[unitName] or \
                        ssItem not in lineCovData[unitName][sItem] or \
                        lineCovData[unitName][sItem][ssItem] == 0):
                    counter += 1
        fileName = item.split('/')[-1].split('.')[0]
        print fileName, ':', str(float(counter) / float(totalLine) * 100) + '%'
        sum += float(counter) / float(totalLine)
print "\tSum: ", str(sum * 100) + '%'        
        
print "\nfun_cov:"
sum = 0.0
for item in infoList:
    if 'self' not in item:
        counter = 0
        for sItem in funCovData[item]:
            for ssItem in funCovData[item][sItem]:
                if funCovData[item][sItem][ssItem] != 0 and \
                       (sItem not in funCovData[unitName] or \
                        ssItem not in funCovData[unitName][sItem] or \
                        funCovData[unitName][sItem][ssItem] == 0
                        ):
                    counter += 1
        fileName = item.split('/')[-1].split('.')[0]
        print fileName, ':', str(float(counter) / float(totalFun) * 100) + '%'
        sum += float(counter) / float(totalFun)
print "\tSum: ", str(sum * 100) + '%'        

print "\nbr_cov:"
sum = 0.0
for item in infoList:
    if 'self' not in item:
        counter = 0
        for sItem in brCovData[item]:
            for ssItem in brCovData[item][sItem]:
                if brCovData[item][sItem][ssItem] != 0 and \
                       (sItem not in brCovData[unitName] or \
                        ssItem not in brCovData[unitName][sItem] or \
                        brCovData[unitName][sItem][ssItem] == 0
                        ):
                    counter += 1
        fileName = item.split('/')[-1].split('.')[0]
        print fileName, ':', str(float(counter) / float(totalBr) * 100) + '%'
        sum += float(counter) / float(totalBr)

print "\tSum: ", str(sum * 100) + '%'        


print r'''
##############################
#
# 4. What is the overall coverage brought to apr by the 4 upper-level packages?
#
##############################
'''

counter = 0
for item in lineStat:
    if lineStat[item] != 0:
        counter += 1
print "line_cov:", str(float(counter) / float(totalLine) * 100) + '%'

counter = 0
for item in funStat:
    if funStat[item] != 0:
        counter += 1
print "fun_cov:", str(float(counter) / float(totalFun) * 100) + '%'

counter = 0
for item in brStat:
    if brStat[item] != 0:
        counter += 1
print "br_cov:", str(float(counter) / float(totalBr) * 100) + '%'


print r'''
##############################
#
# 5. What is the extra coverage brought to apr by all upper-level packages together?
#
##############################
'''

counter = 0
for item in lineStat:
    if lineStat[item] != 0 and \
           (item[0] not in lineCovData[unitName] or \
            item[1] not in lineCovData[unitName][item[0]] or \
            lineCovData[unitName][item[0]][item[1]] == 0):
        counter += 1
print "line_cov:", str(float(counter) / float(totalLine) * 100) + '%'

counter = 0
for item in funStat:
    if funStat[item] != 0 and \
           (item[0] not in funCovData[unitName] or \
            item[1] not in funCovData[unitName][item[0]] or \
            funCovData[unitName][item[0]][item[1]] == 0):
        counter += 1
print "fun_cov:", str(float(counter) / float(totalFun) * 100) + '%'

counter = 0
for item in brStat:
    if brStat[item] != 0 and \
           (item[0] not in brCovData[unitName] or \
            item[1] not in brCovData[unitName][item[0]] or \
            brCovData[unitName][item[0]][item[1]] == 0):
        counter += 1
print "br_cov:", str(float(counter) / float(totalBr) * 100) + '%'


print r'''
##############################
#
# 6. What is the overlap of coverage from the 4 upper-level packages?
#
##############################
'''

for i in range(0, len(infoList)):
    counter = 0
    for item in lineStat_single:
        if lineStat_single[item] == i:
            counter += 1
    cov = float(counter) / float(totalLine)
    print str(cov * 100) + '%', "lines are covered by", i, "packages."

print ''
for i in range(0, len(infoList)):
    counter = 0
    for item in funStat_single:
        if funStat_single[item] == i:
            counter += 1
    cov = float(counter) / float(totalFun)
    print str(cov * 100) + '%', "functions are covered by", i, "packages."


print ''
for i in range(0, len(infoList)):
    counter = 0
    for item in brStat_single:
        if brStat_single[item] == i:
            counter += 1
    cov = float(counter) / float(totalBr)
    print str(cov * 100) + '%', "branches are covered by", i, "packages."




print r'''
##############################
#
# 7. What is the overlap of the extra coverage from the 4 upper-level packages?
#
##############################
'''

for i in range(0, len(infoList)):
    counter = 0
    for item in lineStat_single:
        if lineStat_single[item] == i and \
               (item[0] not in lineCovData[unitName] or \
                item[1] not in lineCovData[unitName][item[0]] or \
                lineCovData[unitName][item[0]][item[1]] == 0):
            counter += 1
    cov = float(counter) / float(totalLine)
    print str(cov * 100) + '%', "lines are covered by", i, "packages."

print ''
for i in range(0, len(infoList)):
    counter = 0
    for item in funStat_single:
        if funStat_single[item] == i and \
               (item[0] not in funCovData[unitName] or \
                item[1] not in funCovData[unitName][item[0]] or \
                funCovData[unitName][item[0]][item[1]] == 0):
            counter += 1
    cov = float(counter) / float(totalFun)
    print str(cov * 100) + '%', "functions are covered by", i, "packages."


print ''
for i in range(0, len(infoList)):
    counter = 0
    for item in brStat_single:
        if brStat_single[item] == i and \
               (item[0] not in brCovData[unitName] or \
                item[1] not in brCovData[unitName][item[0]] or \
                brCovData[unitName][item[0]][item[1]] == 0):
            counter += 1
    cov = float(counter) / float(totalBr)
    print str(cov * 100) + '%', "branches are covered by", i, "packages."


