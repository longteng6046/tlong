#!/usr/bin/python
##############################
#
# File: lcovPlus.py
# Author: Teng Long (tlong@cs.umd.edu)
# Version: 0.2.1
# Descrpition:
#   This is a tool that provides enhanced features processing tracefiles(.info)
#   generated by lcov.
# Created: Jul. 25th, 2011
# Updated:
#   Jul 26, 2011: Changed the option processing with "getopt" module of python
#   Aug 22, 2011: Add the function of coverage frequency statistics
# Bugs:
#   1. if use with '| less' in Unix/Linux, a "Broken pipe" excpetion
#      will be raised.
#   2. when (-r rl r2), r1 and r2 should be anble to be quoted by ""
##############################


import os
import sys
import getopt

version = 0.1

debugFlag = False

def printerr(content):
    if type(content) != type("string"):
        content = str(content)
    if debugFlag == True:
        sys.stderr.write(content + '\n')
        
def errorInfo():
    print >> sys.stderr, "Use lcovPlus --help to get more information"
    sys.exit(1)

def help():
    print '''Usage: lcovPlus [OPTIONS|OPERATIONS]

Use lcovPlus to process tracefile generated by lcov.

Misc:
  -h, --help                    Print this help, then exit
  -v, --version                 Print version Number, then exit

Operation:
  -a, --add-tracefile FILE      Add contents of tracefile
  -r, --replace                 Replace the prefix of source files
  -s, --stat-freq               Count the coverage frequency of functions

  Be careful: only one of '-r' and '-f' flags can be used each time.
  
Options:
  -f file|function              Specify the output format of frequency
                                statistics. The default output is the frequency of
                                files hitted. This option will be skipped if not in
                                '-s' mode
  -o, --output-file FILENAME    Write data to FILENAME instead of stdout
  
  -d, --debug-mode              Output debug information for lcovPlus
  
To report a bug, please contact tlong@cs.umd.edu
'''    


## Get arguments
args = sys.argv[1:]
optlist, args = getopt.gnu_getopt(args, "hvrsf:da:o:", ['help', 'version', 'replace', 'add-tracefile', 'freq-stat', 'output-file', 'debug-mode']) # option list


##############################
# option & argument processing
##############################

aFlag = False
rFlag = False
oFlag = False
sFlag = False

## singple options/operations

opts = [opt[0] for opt in optlist]

if '--help' in opts or '-h' in opts:
    help()
    sys.exit(0)

elif '--version' in opts or '-v' in opts:
    print version
    sys.exit(0)

elif '-d' in opts or '--debug-mode' in opts:
    debugFlag = True

elif '-s' in opts or '--stat-freq' in opts:
    sFlag = True

infileList = [] # the list of added inputed files.
replacePair = None # the list of prefix replacement pairs
outputFile = None


# multi-arg options/operations, some skiped options are parsed in sub
#  sections.
for item in optlist:
    if item[0] == '-a' or item[0] == '--add-tracefile':
        aFlag = True
        infileList.append(item[1])

    elif item[0] == '-r' or item[0] == '--replace':
        rFlag = True
        if len(args) == 2:
            replacePair = (args[0], args[1])
        else:
            errorInfo()
    elif item[0] == '-o' or item[0] == '--output-file':
        oFlag = True
        outputFile = item[1]
    # else:
        # errorInfo()
        
printerr("infileList: " + str(infileList))
printerr("replacePair: " + str(replacePair))


##############################
# flags checking
##############################
if rFlag == True and sFlag == True:
    print >> sys.stderr, "lcovPlus: Please choose only one operation from -s and -r"
    errorInfo()
elif rFlag == False and sFlag == False:
    print >> sys.stderr, "lcovPlus: Please at least choose one operation from -s and -r."
    errorInfo()
#################
# Output choice
#################
if oFlag == True: # output file specified
    outstream = open(outputFile, 'w')
else:
    outstream = sys.stdout



##############################
# dealing with '-r': replacement
##############################
if rFlag == True:
    if len(infileList) == 0:
        print >> sys.stderr, "lcovPlus: Please add exactly ONE tracefile by '-a' for replacement"
        errorInfo()
    elif len(infileList) >= 2:
        print >> sys.stderr, "lcovPlus: Please only add ONE tracefile for replacement"
        errorInfo()
    else:
            
        infile = open(infileList[0], 'r')
        for item in infile.readlines():
            if not item.startswith("SF:"):
                try:
                    outstream.write(item)
                except:
                    None
            else: # the 'SF:' lines
                rawline = item[3:]
                replaceFlag = False # whether replaced anything
                # compare every replacement pair
                if rawline.startswith(replacePair[0]):
                    newline = 'SF:' + replacePair[1] + rawline[len(replacePair[0]):]
                    replaceFlag = True
                if replaceFlag == False:
                    outstream.write(item)
                else:
                    outstream.write(newline)
                    

        # Close files
        infile.close()
        if oFlag == True:
            outstream.close()
    sys.exit(0)
                
######################################
# '-s' operation: frequency statistics
######################################

if sFlag == True:
    ## freqDict = {sourceFile: {function: freq}}
    freqDict = {}
    currentfileName = None
    for traceFile in infileList:
        infile = open(traceFile, 'r')
        for item in infile.readlines():
            if item.startswith("SF:"):
                currentfileName = item.strip()[3:]
                if currentfileName not in freqDict:
                    freqDict[currentfileName] = {}
            elif item.startswith("FNDA:"):
                item = item.strip()
                functionName = item[5:].split(',')[1]
                hitNum = int(item[5:].split(',')[0])

                # if hitNum != 0:
                    # print "functionName:", functionName
                    # print "hitNum:", hitNum

                if functionName not in freqDict[currentfileName]:
                    freqDict[currentfileName][functionName] = hitNum
                else:
                    freqDict[currentfileName][functionName] += hitNum
                    # print freqDict[currentfileName][functionName]


    None

    # for item in freqDict:
        # for sItem in freqDict[item]:
            # print freqDict[item][sItem]
    # exit()

    # Output format processing
    if ('-f', 'file') in optlist or '-f' not in opts:
        outlist = []

        for item in freqDict:
            freq = 0
            for sItem in freqDict[item]:
                freq += freqDict[item][sItem]
            tmpString = item + ": " + str(freq)
            outlist.append(tmpString)
        outlist.sort()
        for item in outlist:
            print >> outstream, item

    elif ('-f', 'function') in optlist:
        outlist = [item for item in freqDict]
        outlist.sort()
        for item in outlist:
            print >> outstream, "FILE: " + item
            sOutlist = [sItem for sItem in freqDict[item]]
            sOutlist.sort()
            for sItem in sOutlist:
                tmpString = '\t' + sItem + ': ' + str(freqDict[item][sItem])
                print >> outstream, tmpString
    else:
        print >> sys.stderr, "Wrong argument given to '-f' option."
        errorInfo()
        
        
    sys.exit(0)
