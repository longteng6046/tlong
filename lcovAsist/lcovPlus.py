#!/usr/bin/python
##############################
#
# File: lcovPlus.py
# Author: Teng Long (tlong@cs.umd.edu)
# Descrpition:
#   This is a tool that provides enhanced features processing tracefiles(.info)
#   generated by lcov.
# Created: Jul. 25th, 2011
# Updated:
# Bus:
#   1. if use with '| less' in Unix/Linux, a "Broken pipe" excpetion
#      will be raised.
#   2. when (-r rl r2), r1 and r2 should be anble to be quoted by ""
##############################


import os
import sys

debugFlag = False

def dbout(content):
    if debugFlag == True:
        sys.stderr.write(content)

# lcovPlus -a tracefile -r old_prefix new_prefix -o outfile

##############################
# option & argument processing
##############################

# print sys.argv

optionList = [] # list of lists, each sublist is an option with all its args.
pair = [] # tmp argument

for i in range(1, len(sys.argv)):
    # print sys.argv[i]

    clause = sys.argv[i]
    if clause.startswith('-'):
        pair = []
        pair.append(clause)
    else:
        pair.append(clause)
    if i == len(sys.argv) - 1 or sys.argv[i+1].startswith('-'):
        optionList.append(pair)

dbout(optionList)

# help information print out.
if ['--help'] in optionList:
    print "help information"
    sys.exit(0)
    


# input files processing

infileList = [] # the list of inputed files.
replaceList = [] # the list of prefix replacement pairs
outputFile = None

aFlag = False
rFlag = False
oFlag = False

for item in optionList:
    if item[0] == '-a':
        aFlag = True
        if len(item) == 2:
            infileList.append(item[1])
        else:
            print >> sys.stderr, "lcovPlus: use multiple '-a tracefile' to add more than one tracefiles"
            print >> sys.stderr, "Use lcovPlus --help to get more information"
            sys.exit(1)

    elif item[0] == '-r':
        rFlag = True
        if len(item) == 3:
            replaceList.append((item[1], item[2]))
        else:
            print >> sys.stderr, "lcovPlus: Wrong argument given to option '-r'"
            print >> sys.stderr, "Use lcovPlus --help to get more information"
            sys.exit(1)
    elif item[0] == '-o':
        oFlag = True
        if len(item) >= 3:
            print >> sys.stderr,  "lcovPlus: Only one output file should be specified"
            print >> sys.stderr, "Use lcovPlus --help to get more information"
            sys.exit(1)
        else:
            outputFile = item[1]
    else:
        print >> sys.stderr, "Unknown option:", item[0]
        print >> sys.stderr, "Use lcovPlus --help to get more information"
        sys.exit(1)

dbout("infileList: " + str(infileList))
dbout("replaceList: " + str(replaceList))

# dealing with '-r': replacement
if rFlag == True:
    if len(infileList) == 0:
        print >> sys.stderr, "lcovPlus: Please add exactly ONE tracefile by '-a' for replacement"
        print >> sys.stderr, "Use lcovPlus --help to get more information"
        sys.exit(1)
    elif len(infileList) >= 2:
        print >> sys.stderr, "lcovPlus: Please only add ONE tracefile for replacement"
        print >> sys.stderr, "Use lcovPlus --help to get more information"
        sys.exit(1)
    else:
        if oFlag == True: # output file specified
            outstream = open(outputFile, 'w')
        else:
            outstream = sys.stdout
            
        infile = open(infileList[0], 'r')
        for item in infile.readlines():
            if not item.startswith("SF:"):
                try:
                    outstream.write(item)
                except:
                    None
            else: # the 'SF:' lines
                rawline = item[3:]
                replaceFlag = False # whether replaced anything
                # compare every replacement pair
                for pair in replaceList:
                    if rawline.startswith(pair[0]):
                        newline = 'SF:' + pair[1] + rawline[len(pair[0]):]
                        replaceFlag = True
                        break
                if replaceFlag == False:
                    outstream.write(item)
                else:
                    outstream.write(newline)
                    

        # Close files
        infile.close()
        if oFlag == True:
            outstream.close()
                
                
        
